#    -*- mode: org -*-
#+TITLE: Lógica em Agda
#+SUBTITLE: PCC102 - Teoria da computação
#+AUTHOR: Rodrigo Ribeiro
#+EMAIL: rodrigo.ribeiro@ufop.edu.br

* Setup inicial

#+begin_src agda2
module aula13 where

open import Basics.Level
open import Data.Bool.Bool
open import Relation.Equality.Propositional

id : ∀ {l}{A : Set l} → A → A
id x = x
#+end_src

* Objetivos

- Apresentação do conceito de isomorfismo entre tipos e sua
realização em Agda.

- Representação de conectivos da lógica proposicional
em Agda.

- Representação de quantificadores da lógica de
predicados em Agda.

- Demonstração de equivalências lógicas usando
isomorfismos.

* Isomorfismo

- Dizemos que um tipo `A` é isomórfico a um tipo `B` se 
existem funções `f : A → B` e `g : B → A` tais que
`f ∘ g ≡ id` e `g ∘ f ≡ id`.

* Isomorfismo

- Composição de funções

#+begin_src agda2
_∘_ : ∀ {l1 l2 l3}
        {A : Set l1}
        {B : Set l2}
        {C : Set l3} →
        (B → C) → (A → B) → (A → C)
g ∘ f = λ x → g (f x)
#+end_src

* Isomorfismo

- Podemos definir a noção de isomorfismo como um registro
Agda.

#+begin_src agda2
infix 0 _≃_

record _≃_ {l}{l'}(A : Set l)(B : Set l') : Set (l ⊔ l') where
  field
    to   : A → B
    from : B → A
    to∘from : ∀ (y : B) → (to ∘ from) y ≡ y
    from∘to : ∀ (x : A) → (from ∘ to) x ≡ x

open _≃_
#+end_src

* Isomorfismo

- Isomorfismo é uma relação reflexiva.

#+begin_src agda2
≃-refl : ∀ {l}{A : Set l} → A ≃ A
≃-refl
  = record {
      to      = id
    ; from    = id
    ; to∘from = λ y → refl
    ; from∘to = λ x → refl }
#+end_src

* Isomorfismo

- Isomorfismo é uma relação simétrica.

#+begin_src agda2
≃-sym : ∀ {l l'}{A : Set l}{B : Set l'}
        → A ≃ B → B ≃ A
≃-sym A≃B
  = record {
       to = _≃_.from A≃B
     ; from = _≃_.to A≃B
     ; to∘from = λ {y → _≃_.from∘to A≃B y}
     ; from∘to = λ {x → _≃_.to∘from A≃B x} }
#+end_src

* Isomorfismo

- Isomorfismo é uma relação transitiva.

#+begin_src agda2
≃-trans : ∀ {l₁ l₂ l₃}
            {A : Set l₁}
            {B : Set l₂}
            {C : Set l₃} →
            A ≃ B → B ≃ C → A ≃ C
≃-trans A≃B B≃C
  = record {
      to = _≃_.to B≃C ∘ _≃_.to A≃B
    ; from = _≃_.from A≃B ∘ _≃_.from B≃C
    ; to∘from = λ {y →
              begin
                 ((to B≃C ∘ to A≃B) ∘ (from A≃B ∘ from B≃C)) y
              ≡⟨⟩
                 (to B≃C (to A≃B (from A≃B (from B≃C y))))
              ≡⟨ cong (to B≃C) (to∘from A≃B (from B≃C y)) ⟩
                 (to B≃C (from B≃C y))
              ≡⟨ _≃_.to∘from B≃C y ⟩
                 y
               ∎}
    ; from∘to = λ {x →
              begin
                 ((from A≃B ∘ from B≃C) ∘ (to B≃C ∘ to A≃B)) x
               ≡⟨⟩
                 from A≃B (from B≃C (to B≃C (to A≃B x)))
               ≡⟨ cong (from A≃B) (_≃_.from∘to B≃C (to A≃B x)) ⟩
                 from A≃B (to A≃B x)
               ≡⟨ _≃_.from∘to A≃B x ⟩
                 x
               ∎} }
#+end_src

* Isomorfismo

- É possível definir operadores para raciocínio
equacional envolvendo isomorfismos.

- Para isso, vamos definir um módulo para encapsular
esses operadores.

#+begin_src agda2
module ≃-Reasoning where

infix  1 ≃-begin_
infixr 2 _≃⟨_⟩_
infix  3 _≃-∎
#+end_src

* Isomorfismo

- Iniciando uma dedução por equações.

#+begin_src agda2
≃-begin_ : ∀ {A B : Set}
      → A ≃ B → A ≃ B
≃-begin A≃B = A≃B
#+end_src

* Isomorfismo

- Transitividade

#+begin_src agda2
_≃⟨_⟩_ : ∀ {l₁ l₂ l₃}(A : Set l₁)
                     {B : Set l₂}
                     {C : Set l₃} → 
       A ≃ B → B ≃ C → A ≃ C
_ ≃⟨ A≃B ⟩ B≃C = ≃-trans A≃B B≃C
#+end_src

* Isomorfismo

- Finalizando uma dedução

#+begin_src agda2
_≃-∎ : ∀ (A : Set) → A ≃ A
A ≃-∎ = ≃-refl
#+end_src

* Isomorfismo

- Usando a infra-estrutura definida,
poderemos provar diversos resultados sobre
a lógica proposicional em Agda.

* Conjunção

- De acordo com a correspondência de Curry-Howard,
a conjunção corresponde a tipos produto.

#+begin_src agda2
infixr 2 _×_
infixr 4 _,_

record _×_ {l₁ l₂}
           (A : Set l₁)
           (B : Set l₂) : Set (l₁ ⊔ l₂) where
  constructor _,_ -- A → B → A × B: Introdução do ∧ 
  field
    proj₁ : A -- proj₁ : A × B → A: Eliminação do ∧ à esquerda.
    proj₂ : B -- proj₂ : A × B → B: Eliminação do ∧ à direita.

open _×_
#+end_src

* Conjunção

- Propriedade: conjunção é comutativa.

#+begin_src agda2
swap : ∀ {a b}{A : Set a}{B : Set b} →
         A × B → B × A
swap (a , b) = b , a

swap-id : ∀ {a b}{A : Set a}{B : Set b}
          {x : A}{y : B} → swap (swap (x , y)) ≡ (x , y)
swap-id = refl

×-comm : ∀ {l₁ l₂}{A : Set l₁}{B : Set l₂} →
         A × B ≃ B × A
×-comm
  = record {
      to = swap
    ; from = swap
    ; to∘from = λ{(x , y) → swap-id {x = x}{y = y}}
    ; from∘to = λ{ (x , y) → swap-id {x = x}{y = y}} }
#+end_src

* Verdadeiro

- A constante ⊤ é representada por um tipo contendo
um único construtor.

- Representamos esse fato usando um registro

#+begin_src agda2
record ⊤ : Set where
  constructor tt
#+end_src

* Verdadeiro

- O construtor `tt` corresponde a única forma de construir uma
evidência (demonstração) de ⊤.

- ⊤ é identidade para ×

#+begin_src agda2
×-identity-r : ∀ {l}{A : Set l} → A × ⊤ ≃ A
×-identity-r
  = record { to = proj₁
           ; from = λ a → a , tt
           ; to∘from = λ {y → refl}
           ; from∘to = λ {(a , tt) → refl } }
#+end_src

* Disjunção

- A disjunção é representada por um tipo que codifica a união disjunta
entre dois tipos.

#+begin_src agda2
infix 1 _⊎_

data _⊎_ {l₁ l₂}(A : Set l₁)
                (B : Set l₂) : Set (l₁ ⊔ l₂) where
  inj₁ : A → A ⊎ B  -- introdução do ∨ à esquerda.
  inj₂ : B → A ⊎ B  -- introdução do ∨ à direita.
#+end_src

* Disjunção

- Para a eliminação da disjunção, utilizamos casamento de padrão:

#+begin_src agda2
⊎-elim : ∀ {l₁ l₂ l₃}{A : Set l₁}{B : Set l₂}{C : Set l₃} →
           (A → C) → (B → C) → A ⊎ B → C
⊎-elim f g (inj₁ x) = f x
⊎-elim f g (inj₂ y) = g y
#+end_src

## Disjunção

- Exemplo: ⊎ é associativo.

#+begin_src agda2
⊎-assoc : ∀ {l₁ l₂ l₃}{A : Set l₁}{B : Set l₂}{C : Set l₃} →
          A ⊎ (B ⊎ C) ≃ (A ⊎ B) ⊎ C
⊎-assoc
  = record { to = λ{ (inj₁ a) → inj₁ (inj₁ a) ;
                     (inj₂ (inj₁ b)) → inj₁ (inj₂ b) ;
                     (inj₂ (inj₂ c)) → inj₂ c  }
           ; from = ⊎-elim (⊎-elim inj₁ (inj₂ ∘ inj₁)) (inj₂ ∘ inj₂)
           ; to∘from = λ { (inj₁ (inj₁ a)) → refl ;
                           (inj₁ (inj₂ b)) → refl ;
                           (inj₂ c) → refl }
           ; from∘to = λ { (inj₁ a) → refl ;
                           (inj₂ (inj₁ b)) → refl ;
                           (inj₂ (inj₂ c)) → refl} }
#+end_src

* Falso

- A constante `⊥` é representada por um tipo sem elementos.

#+begin_src agda2
data ⊥ : Set where
#+end_src

* Falso

- Eliminação de ⊥

#+begin_src agda2
⊥-elim : ∀ {l}{A : Set l} → ⊥ → A
⊥-elim ()
#+end_src

* Falso

- ⊥ é identidade para ⊎

#+begin_src agda2
⊎-identity-l : ∀ {l}{A : Set l} → A ⊎ ⊥ ≃ A
⊎-identity-l
  = record { to = ⊎-elim id ⊥-elim
           ; from = inj₁
           ; to∘from = λ y → refl
           ; from∘to = λ { (inj₁ a) → refl ;
                           (inj₂ ())} }
#+end_src

* Implicação

- A implicação é representada por tipos funcionais em Agda.

- A regra de introdução da implicação é apenas a criação de
uma λ-abstração.

- A regra de eliminação da implicação é apenas a aplicação
de funções.

- Exemplo

#+begin_src agda2
currying : ∀ {l₁ l₂ l₃}{A : Set l₁}{B : Set l₂}{C : Set l₃} →
           (A → B → C) ≃ ((A × B) → C)
currying
  = record { to = λ f → λ {(x , y) → f x y }
           ; from = λ f x y → f (x , y) 
           ; to∘from = λ f → refl
           ; from∘to = λ f → refl }
#+end_src

* Bicondicional

- Representamos o conectivo bicondicional por um registro
formado por duas implicações (funções).

#+begin_src agda2
record _⇔_ {l₁ l₂}(A : Set l₁)
                  (B : Set l₂) : Set (l₁ ⊔ l₂) where
  field
    to   : A → B
    from : B → A

open _⇔_
#+end_src

* Bicondicional
  
- Equivalência

#+begin_src agda2
⇔-× : ∀ {l₁ l₂}{A : Set l₁}{B : Set l₂} →
       (A ⇔ B) ≃ (A → B) × (B → A)
⇔-× = record {
        to = λ A⇔B → to A⇔B , from A⇔B
      ; from = λ {(A→B , B→A) → record {to = A→B ;
                                        from = B→A }}
      ; to∘from = λ{ (A→B , B→A) → refl }
      ; from∘to = λ { record { to = to
                             ; from = from } → refl} }
#+end_src

* Negação

- Representamos a negação usando funções e o tipo ⊥.

#+begin_src agda2
infix 3 ¬_

¬_ : ∀ {l} → Set l → Set l
¬ A = A → ⊥
#+end_src

* Negação

- Em Agda, o princípio do 3o excluído não é demonstrável.

- Lembre-se: esse axioma não é dedutível na lógica intuicionista.

- Porém, podemos mostrar que a dupla negação de qualquer tautologia
da lógica clássica é demonstrável na lógica intuicionista.

#+begin_src agda2
excluded : ∀ {l}{A : Set l} → ¬ (¬ (A ⊎ ¬ A))
excluded ¬A⊎¬A = ¬A⊎¬A (inj₂ (λ a → ¬A⊎¬A (inj₁ a)))
#+end_src

* Quantificadores

- Quantificador universal é uma noção primitiva em Agda.

- Intuitivamente, o tipo `∀ (x : A) → B` em que `x` não aparece
livre em `B` é representado por `A → B`.

- Dessa forma, a introdução do quantificador universal consiste
da definição de funções.

- A eliminação do quantificador universal consiste na aplicação
de funções.

* Quantificadores

- O quantificador existencial é definido por um par formado:
    - Um valor de tipo `x : A`, a evidência do ∃.
    - Um valor de tipo `P x`, que demonstra `P` para o valor `x`.

* Quantificadores 

- Para isso, definimos o tipo Σ, conhecido como produto dependente.

#+begin_src agda2
record Σ {l₁ l₂}
         (A : Set l₁)
         (B : A → Set l₂) : Set (l₁ ⊔ l₂) where
  constructor _,_
  field
    proj₁ : A
    proj₂ : B proj₁

open Σ
#+end_src

* Quantificadores

- O tipo Σ é chamado de produto dependente porque o valor do segundo
componente do par depende do valor do primeiro.

- Exemplo: 

#+begin_src agda2
_ : Σ Bool (λ x → x ≡ false)
_ = false , refl
#+end_src

* Quantificadores

- Usando o tipo Σ, podemos definir o quantificador existencial como
um produto dependente em que o primeiro argumento é implícito.

#+begin_src agda2
∃ : ∀ {l₁ l₂}
      {A : Set l₁}
      (B : A → Set l₂) → Set (l₁ ⊔ l₂)
∃ {A = A} B = Σ A B
#+end_src

* Quantificadores

- Notação alternativa para o quantificador existencial.

#+begin_src agda2
∃-syntax = ∃
syntax ∃-syntax (λ x → B) = ∃[ x ] B
#+end_src

* Quantificadores

- Exemplo

#+begin_src agda2
∃-⊎ : ∀ {l₁ l₂}{A : Set l₁}{B C : A → Set l₂} →
        ∃[ x ] (B x ⊎ C x) ≃ (∃[ x ] B x) ⊎ (∃[ x ] C x)
∃-⊎
  = record { to = λ { (x , (inj₁ bx)) → inj₁ (x , bx) ;
                      (x , (inj₂ cx)) → inj₂ (x , cx) }
           ; from = λ { (inj₁ (x , bx)) → x , inj₁ bx ;
                         (inj₂ (x , cx)) → x , inj₂ cx }
           ; to∘from = λ { (inj₁ (x , bx)) → refl ;
                           (inj₂ (x , cx)) → refl}
           ; from∘to = λ {(x , (inj₁ bx)) → refl ;
                           (x , (inj₂ cx)) → refl } }
#+end_src

* Concluindo

- Representamos conectivos da lógica proposicional utilizando
tipos indutivos Agda.

- Equivalências lógicas utilizando isomorfismos entre tipos.

* Referências

- Kokke, Wen; Walder, Philip; Siek, Jeremy. Programming languages
foundations in Agda.
